[{"categories":["draft"],"content":"algo 测试 流风回雪 搜索栏输入“流风”测试 ","date":"2024-09-22","objectID":"/posts/a1c20ac/:0:0","tags":["draft"],"title":"Algolia测试","uri":"/posts/a1c20ac/"},{"categories":["学习记录"],"content":"常用等价无穷小 $$ \\sin x\\sim x\\\\ \\tan x\\sim x\\\\ \\arcsin x\\sim x\\\\ \\arctan x\\sim x\\\\ \\ln(1+x)\\sim x\\\\e^{x}-1\\sim x\\\\a^{x}-1\\sim x\\ln a\\\\ 1-\\cos x\\sim\\frac{1}{2}x^{2} \\\\(1+x)^{a}-1\\sim ax $$ ","date":"2024-09-04","objectID":"/posts/b2c5904/:1:0","tags":["高等数学"],"title":"常用数学公式","uri":"/posts/b2c5904/"},{"categories":["学习记录"],"content":"泰勒展开 $$ f\\left(x\\right)=f\\left(0\\right)+f'\\left(0\\right)x+\\frac{f''\\left(0\\right)}{2!}x^{2}+\\cdots+\\frac{f^{\\left(n\\right)}\\left(0\\right)}{n!}x^{n}+o\\left(x^{n}\\right) $$ 如 $$ \\sin x=\\sin0+(\\sin x)^{\\prime}|_{x=0}\\cdot x+\\frac{(\\sin x)^{\\prime\\prime}|_{x=0}}{2!}x^{2}+\\frac{(\\sin x)^{\\prime\\prime\\prime}|_{x=0}}{3!}x^{3}+o(x^{3}) $$ 即 $$ \\sin x=x-\\frac16x^{3}+o(x^{3}) $$ 再如 $$ \\sec x=\\sec0+(\\sec x)^{\\prime}|_{x=0}\\cdot x+\\frac{(\\sec x)^{\\prime\\prime}|_{x=0}}{2!}x^2+\\frac{(\\sec x)^{\\prime\\prime\\prime}|_{x=0}}{3!}x^3+o(x^3) $$ 即 $$ \\sec x=1+\\frac{x^2}2+o(x^3) $$ 同理可得如下重要函数的泰勒公式。 $$ \\sin x=x-\\frac{x^{3}}{3!}+o\\left(x^{3}\\right)\\\\ \\cos x=1-\\frac{x^{2}}{2!}+\\frac{x^{4}}{4!}+o\\left(x^{4}\\right)\\\\ \\arcsin x=x+\\frac{x^{3}}{3!}+o\\left(x^{3}\\right)\\\\ \\tan x=x+\\frac{x^{3}}{3}+o\\left(x^{3}\\right)\\\\ e^{x}=1+x+\\frac{x^{2}}{2!}+\\frac{x^{3}}{3!}+o\\left(x^{3}\\right)\\\\ \\quad\\left(1+x\\right)^{\\alpha}=1+\\alpha x+\\frac{\\alpha\\left(\\alpha-1\\right)}{2!}x^{2}+o\\left(x^{2}\\right) $$ ","date":"2024-09-04","objectID":"/posts/b2c5904/:2:0","tags":["高等数学"],"title":"常用数学公式","uri":"/posts/b2c5904/"},{"categories":["学习记录"],"content":"基本求导公式 $$ (x^{a})^{\\prime}=\\alpha x^{a-1}\\left(\\alpha\\text{ 为常数 }\\right)\\\\ \\quad(a^{x})^{\\prime}=a^{x}\\ln a(a\u003e0,a\\neq1)\\\\ \\quad(e^{x})^{\\prime}=e^{x}\\\\ \\quad(\\log_{a}x)^{\\prime}=\\frac{1}{x\\ln a}\\left(a\u003e0,a\\neq1\\right)\\\\ \\begin{gathered} \\left(\\ln\\left|x\\right|\\right)^{\\prime}=\\frac{1}{x}\\\\ \\left(\\sin x\\right)^{\\prime}=\\cos x\\\\ \\left(\\cos x\\right)^{\\prime}=-\\sin x\\\\ \\left(\\arcsin x\\right)^{\\prime}=\\frac{1}{\\sqrt{1-x^{2}}} \\\\ (\\arccos x)^{\\prime}=-\\frac{1}{\\sqrt{1-x^{2}}}\\\\ \\left(\\tan x\\right)^{\\prime}=\\sec^{2}x\\\\ \\left(\\cot x\\right)^{\\prime}=-\\csc^{2}x\\\\ \\left(\\arctan x\\right)^{\\prime}=\\frac{1}{1+x^{2}} \\\\ \\left(arccotx\\right)^{\\prime}=-\\frac{1}{1+x^{2}}\\\\ \\left(\\sec x\\right)^{\\prime}=\\sec x\\tan x \\\\ \\left(\\csc x\\right)^{\\prime}=-\\csc x\\cot x \\\\ \\left[\\ln\\left(x+\\sqrt{x^{2}+1}\\right)\\right]^{\\prime}=\\frac{1}{\\sqrt{x^{2}+1}} \\\\ \\left[\\ln\\left(x+\\sqrt{x^{2}-1}\\right)\\right]^{\\prime}=\\frac{1}{\\sqrt{x^{2}-1}} \\end{gathered} $$ ","date":"2024-09-04","objectID":"/posts/b2c5904/:3:0","tags":["高等数学"],"title":"常用数学公式","uri":"/posts/b2c5904/"},{"categories":["学习记录"],"content":"ping脚本的编写 由于之前没写过.bat脚本，先写一个简单的ping试试。注意ping的脚本不能命名为ping.bat，会出错。 ping www.baidu.com ping www.sina.com 双击是可以执行的，但是cmd窗口在实行完之后就自动关闭了，想到在push之后往往要查看结果，所以修改让cmd窗口执行完之后保留。 修改为 ping www.baidu.com ping www.sina.com cmd /k 这样运行后cmd窗口不会关闭，但是会有一行 C:\\Users\\yhxgo\\hugoblog\u003ecmd /k 也就是对执行cmd /k的回显，要想不显示回显，在这一命令前面+@，也就是 ping www.baidu.com ping www.sina.com @cmd /k 这样就可以正常执行ping并且执行完后不关闭cmd窗口也没有额外的回显。 然后编写push的脚本，很简单，就是把用到的几个命令合一块就可以了。hpush.bat文件放在博客的根目录，也就是public的上一级目录 hugo cd public git add . git commit -m update git push cd .. @cmd /k 双击运行可以正常push，成功实现脚本push。 那么再写一个本地部署调试的脚本吧~ 一开始我写的是 hugo hugo server start http://localhost:1313/ @cmd /k 按照平时逐条命令然后打开浏览器的顺序来写，结果发现不能打开浏览器。因为执行hugo server后，cmd就停在这个地方了，需要ctrl+c停止后才能继续执行下一条打开网页，那么肯定是不行的，因为停止后在访问本地部署的地址就没东西了，所以改一下顺序 hugo start http://localhost:1313/ hugo server @cmd /k 然后双击运行就可以自动本地部署然后在浏览器打开本地网页了 ","date":"2024-07-11","objectID":"/posts/6db4cf1/:1:0","tags":["程序"],"title":"Batch脚本编写","uri":"/posts/6db4cf1/"},{"categories":["学习记录"],"content":"ESP32c3_FFT_LEDmatrix ","date":"2024-07-08","objectID":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/:0:0","tags":["单片机"],"title":"ESP32C3频率响应LED阵列","uri":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/"},{"categories":["学习记录"],"content":"条件 需要的元件：Arduino ESP32c3、MAX9814麦克风模块、MAX72198*8LED阵列模块 环境：Windows10家庭版、Arduino IDE v2.0.4 使用的库函数：LedControl v1.0.6、ArduinoFFT v1.6.1 ","date":"2024-07-08","objectID":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/:1:0","tags":["单片机"],"title":"ESP32C3频率响应LED阵列","uri":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/"},{"categories":["学习记录"],"content":"原理图 如果使用的是ESP32C3，在编译前请进行以下操作 将C:文档\\Arduino\\libraries\\LedControl\\src 路径（也就是LEDControl库的安装路径）下的LedControl.h文件中的 #include \u003cavr/pgmspace.h\u003e 注释掉或者删除（大约在第30行），否则会报错 如果不知道路径在哪，把鼠标指针放到代码里#include \u003cLedControl.h\u003e这一行IDE就会显示出来 ","date":"2024-07-08","objectID":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/:2:0","tags":["单片机"],"title":"ESP32C3频率响应LED阵列","uri":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/"},{"categories":["学习记录"],"content":"连线 参考原理图 ESP32c3 MAX9814 MAX7219 GPIO9 \\ CLK GPIO10 \\ CS GPIO12 \\ DIN GPIO1 OUT \\ 5V VCC VCC GND GND GND ESP32c3不推荐使用GPIO11，如果要使用需要请先进行解锁 代码(GitHub - nightvoyageryhx/ESP32c3_FFT_LEDmatrix) ","date":"2024-07-08","objectID":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/:3:0","tags":["单片机"],"title":"ESP32C3频率响应LED阵列","uri":"/posts/esp32c3%E9%A2%91%E7%8E%87%E5%93%8D%E5%BA%94led%E9%98%B5%E5%88%97/"},{"categories":["学习记录"],"content":"西邮生产实习的内容","date":"2024-07-06","objectID":"/posts/%E6%97%A0%E7%BA%BF%E4%BF%A1%E5%8F%B7%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%88%86%E6%9E%90/","tags":["网络","通信","4G"],"title":"无线信号测量及分析","uri":"/posts/%E6%97%A0%E7%BA%BF%E4%BF%A1%E5%8F%B7%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%88%86%E6%9E%90/"},{"categories":["学习记录"],"content":" 模3冲突 PCI全称Physical Cell Identifier，即物理小区标识，LTE中终端以此区分不同小区的无线信号。从物理层来看，PCI是由主同步信号（PSS）与辅同步信号（SSS）组成，可以通过简单运算获得 $$ PCI=PSS+{3}\\times{SSS} $$ 模3干扰，其实就是两个小区的PCI值除3 余数相同，也就是PSS冲突，且方向对打，产生的干扰，例A小区PCI为9，除3余数为0，B小区PCI为21除3最后余数为0，且A跟B小区方向对打，就产生了模3干扰，一般处理方法可以是合理的调下其中一个小区的PCI位置，避开余数相同的小区对打。 覆盖问题 RSRP (Reference Signal Receiving Power，参考信号接收功率) 是LTE网络中可以代表无线信号强度的关键参数。RSRP的功率可反应接收到信号的强度和覆盖的情况。 1.弱覆盖 2.假弱覆盖 在很近的位置由高强度和低强度的小区，调整接入小区规则和邻区来改善质量。 以下内容由小组共同完成 主要的测试过程就是将电脑连接到手机和gps，手机根据有gps给的位置和接收到的各基站信号的强弱打点。 手机不断地进行ping或者拨号来和基站交换信息以记录信号的情况，每一次呼叫或者ping都会生成一个点，连续的ping，即可在路径上由点连成线来观测路径上各位置的信号状况。 测试西邮校区信号强度并分析基站调整策略 一、实训目的 1、pilot pioneer软件安装； 2、相关硬件安装。 3、利用pilot pioneer软件对西邮校园各点进行信号强度测量； 4、与2019年信号强度数据进行对比，猜测基站的调整方法。 二、实训步骤 1、 安装测试软件鼎利pioneer； 2、 安装硬件加密狗（类似u盘）； 3、 安装手机驱动程序； 4、 安装GPS接收机驱动程序； 5、 打点测试。 三、问题寻找与分析 覆盖问题 ·覆盖差区域——RSRP（参考信号接收功率）小于-105dBm——红 ·覆盖一般区域——RSRP为-100dBm到-95dBm——浅蓝 ·覆盖良好区域——RSRP为-95dBm以上——浅绿 ·覆盖特别好区域——RSRP大于-80dBm——深绿 质量问题 ·质量差区域：SINR小于3——红 ·质量一般区域：SINR为3到15——浅绿 ·质量好区域：SINR为15以上——深绿 弱覆盖 真的弱覆盖 ·调整周边小区天馈 ·增加小区 非真弱覆盖 ·完善邻区关系 ·调整切换参数 质量问题 邻区不完整 ·完善邻区关系 重叠覆盖 ·控制周边小区覆盖 模3干扰 ·调整PCI ·调整小区天馈 四、数据分析与对比 EARFCN在通信中称为E-UTRA Absolute Radio Frequency Channel Number。 EARFCN是LTE系统中用来表示频段的参数，它是一个无单位的数字，用于标识TE系统中的每个频段。频段是指无线通信中分配给各种无线技术使用的一段特定的频率范围。RSRP（Reference Signal Received Power）：参考信号接收功率，是衡量UE（用户设备）在某一服务小区内接收到的下行参考信号的功率大小。RSRP主要反映了UE与基站之间的无线信号强度，是评估无线链路质量的重要参数。 RSRQ（Reference Signal Received Quality）：参考信号接收质量，是UE测量到的参考信号的质量。RSRQ是通过比较接收到的参考信号功率与总干扰加噪声功率来计算的，因此它可以更全面地反映UE在特定小区内的信号质量。 RSSI是\"Received Signal Strength Indication\"的缩写，即接收的信号强度指示。它是一个用于衡量设备从基站或其他发射点接收到的信号强度的测量单位，通常以dBm（分贝毫瓦）表示。RSSI的值越大，表示设备接收到的信号越强。RSSI不仅用于判断链接质量，还是决定是否增大广播发送强度的一个依据。RSSI的测量值一般不包括天线增益或传输系统的损耗，它是一种定位技术，通过接收到的信号强弱测定信号点与接收点的距离，进而根据相应数据进行定位计算。 （一）-105dBm 1、西操场 西操场信号强度在\u003e-105dBm区域，2019和2024年没有区别 2、湖边崇德路 前后对比也没有区别 3、2019学术交流中心（没有重合路径）故只对2019的信号强度进行单独分析 根据基站和楼层相对位置可知，改变天馈无法解决弱覆盖问题，猜测应该增加小区 （二）-100dBm 1、教学楼 2019 和之前-105dBm情况一样，真弱覆盖，楼层遮挡，增加基站 2、西操场南部 总体效果是2024基站信号得到改善；我们通过基站数据进一步分析； 根据基站位置可知，40936小区比38400小区信号弱，再根据2019和2024两年小区对比，猜测通过改善邻区关系，另选41134小区改善质量 3、湖边崇德路 和2024年的图片进行对比，发现只有这一个点信号较弱，不是真弱覆盖 但是邻近点信号较好，两个点所选小区不同，38544小区信号明显好于40936，猜测改善方式为调整邻区关系 4、教学楼 共有4个信号较弱的点，分为两类进行分析 （1） 图上三个蓝点，信号较弱，真弱覆盖，猜测增加了基站，或调整了天馈。 （2） 但是在北边一点的位置，有信号较强的小区，但是信号还是很弱，为切换参数设置不当，猜测更改了切换参数，使信号变强。 （三）-95dBm 1、湖边崇德路 和2024年相比，-90dBm以上信号较多；并且发现教学楼旁和该路上都为同一个基站进行覆盖，故猜测牺牲人数密度小的信号强度来改善教学楼的信号强度，主要原因可能是4g的部分带宽划给5g，中国移动2600M频段双工TDD制式LTR/NR带宽有160M，20年后随着5G的建设，100M分给了5G，导致4G信号变弱。 2、3号教学楼 3号教学楼旁信号得到改善，猜测基站天馈变化或增加了基站数量 3、西篮球场 西操场信号依旧较强 （四）-80dBm 对-80dBm以上信号进行对比，分析整体信号改善情况 1、 西操场 2、教学楼和学术交流中心 3、湖边崇德路 ","date":"2024-07-06","objectID":"/posts/%E6%97%A0%E7%BA%BF%E4%BF%A1%E5%8F%B7%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%88%86%E6%9E%90/:0:0","tags":["网络","通信","4G"],"title":"无线信号测量及分析","uri":"/posts/%E6%97%A0%E7%BA%BF%E4%BF%A1%E5%8F%B7%E6%B5%8B%E9%87%8F%E5%8F%8A%E5%88%86%E6%9E%90/"},{"categories":["学习记录"],"content":"概念 ITU（International Telecommunication Union， 国际电信联盟 ISO（International Standards Organization，国 际标准化组织） IEEE（Institute of Electrical and Electronics Engineers，电气和电子工程师协会） PPP （Point-to-Point Protocol） 端到端协议 SAP（stable abstraction principle ）稳定抽象原则 ICMP（Internet Control Message Protocol）Internet控制 报文 协议 传输控制协议（TCP，Transmission Control Protocol） UDP User Datagram Protocol 用户数据报协议 开放式最短路径优先OSPF（Open Shortest Path First） 动态主机配置协议DHCP（Dynamic Host Configuration Protocol） 路由信息协议RIP（Routing Information Protocol）基于距离矢量算法的路由协议，利用跳数来作为计量标准 实时传输协议（Real-time Transport Protocol或简写RTP）是一个网络传输协议，它是由IETF的多媒体传输工作小组1996年在RFC 1889中公布的。 实时传输控制协议(Real-time transport Control Protocol，RTCP) NAT（Network Address Translation），是指网络地址转换，1994年提出的。NAT是用于在本地网络中使用私有地址，在连接互联网时转而使用全局 IP 地址的技术。 TSAP Transport Service Access Point 传输服务访问点 ARP（Address Resolution Protocol，地址解析协议）是用来将IP地址解析为MAC地址的协议。主机或三层网络设备上会维护一张ARP表，用于存储IP地址和MAC地址的映射关系，一般ARP表项包括动态ARP表项和静态ARP表项。 OSI (Open System Interconnection Reference Model)开放式通信系统互联参考模型 DNS（Domain Name System）域名解析协议、域名系统 国际互联网工程任务组（The Internet Engineering Task Force，简称 IETF） 征求意见稿（英语：Request For Comments，缩写为RFC） PSTN 公共交换电话网络 非对称数字用户线路（ADSL，Asymmetric Digital Subscriber Line） MACA带有冲突避免的多路访问 非屏蔽双绞线(UTP：Unshielded Twisted Pair) 屏蔽双绞线(STP：Shielded Twisted Pair) IGMP(Internet Group Management Protocol，因特网组管理协议)允许Internet中的计算机参加多播，是计算机用做向相邻多目路由器报告多组成员的协议。多目路由器是支持组播的路由器，它向本地网络发送IGMP查询，计算机通过发送IGMP报告来应答查询。多目路由器负责将组播包转发到网络中所有组播成员。 ATM 异步传输模式(Asynchronous Transfer Mode) 无类别域间路由（Classless Inter-Domain Routing、CIDR） ","date":"2024-06-15","objectID":"/posts/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0/:1:0","tags":["网络"],"title":"计网笔记","uri":"/posts/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"知识点 802.3网络 MAC地址长度为48位（6个字节） 成帧方法 ： 字符计数法 含字节填充的分界符法 含位填充的分界标志法 物理层编码违例法 TCP协议头在数据部分 ICMP 报文封装在IP数据报中 前导域：10101010，用于接收方和发送方时钟同步。 8个字节 TCP在不可靠的互联网络上，提供一个端 到端的，全双工的，可靠的，面向连接的， 一对一的字节流服务 24年9月21日重启 邮箱 pop3、IMAP、SNMP POP3、SMTP和IMAP之间的区别和联系_smpt pop3 imap-CSDN博客 简单网络管理协议（SNMP）是TCP/IP协议簇的一个应用层协议。在1988年被制定，并被Internet体系结构委员会（IAB）采纳作为一个短期的网络管理解决方案；由于SNMP的简单性，在Internet时代得到了蓬勃的发展，1992年发布了SNMPv2版本，以增强SNMPv1的安全性和功能。现在，已经有了SNMPv3版本。 ","date":"2024-06-15","objectID":"/posts/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0/:2:0","tags":["网络"],"title":"计网笔记","uri":"/posts/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"序列检测器 序列检测器是一种数字电路，用于检测输入序列中是否出现预定义的特定序列。三段式序列检测器是一种常用的实现方式，它将检测过程分为三个阶段：复位状态、中间状态和检测状态。 复位状态: 这是电路的初始状态，表示还没有检测到任何目标序列的一部分。 在此状态下，电路会忽略所有输入，直到接收到目标序列的第一个比特。 通常使用一个复位信号来初始化电路到复位状态。 中间状态: 当电路接收到目标序列中的部分比特时，它会进入一个或多个中间状态。 中间状态的数量取决于目标序列的长度和复杂性。 每个中间状态都表示已经检测到目标序列的一部分，并等待接收后续比特。 电路根据当前状态和输入比特，跳转到下一个状态或返回复位状态。 检测状态: 当电路接收到完整的目标序列时，它会进入检测状态。 在此状态下，电路会输出一个信号，表示已经成功检测到目标序列。 然后，电路可以根据设计选择返回复位状态或继续检测下一个目标序列。 三段式序列检测器可以使用多种逻辑电路来实现，如状态机: 使用状态转移图和状态表来描述电路的行为，并使用触发器和组合逻辑电路来实现状态转换和输出逻辑 状态转移列表 输入 当前状态 下一个状态 输出 0 IDLE IDLE 0 1 IDLE A 0 0 A B 0 1 A A 0 0 B C 0 1 B A 0 0 C IDLE 0 1 C D 0 0 D B 0 1 D E 1 0 E B 0 1 E A 0 状态转移图 stateDiagram\rIDLE--\u003eIDLE:0/0\rIDLE--\u003eA:1/0\rA--\u003eB:0/0\rA--\u003eA:1/0\rB--\u003eA:1/0\rB--\u003eC:0/0\rC--\u003eIDLE:0/0\rC--\u003eD:1/0\rD--\u003eB:0/0\rD--\u003eE:1/1\rE--\u003eB:0/0\rE--\u003eA:1/0 stateDiagram\rIDLE--\u003eIDLE:0/0\rIDLE--\u003eA:1/0\rA--\u003eB:0/0\rA--\u003eA:1/0\rB--\u003eA:1/0\rB--\u003eC:0/0\rC--\u003eIDLE:0/0\rC--\u003eD:1/0\rD--\u003eB:0/0\rD--\u003eE:1/1\rE--\u003eB:0/0\rE--\u003eA:1/0 verilog代码 ztj.v module ztj(D_out,D_in,rst_n,clk); // 定义状态编码，每个状态用5位二进制表示 parameter IDLE=5'b00000;//空闲状态 parameter A=5'b00001;//A parameter B=5'b00010;//B parameter C=5'b00100;//C parameter D=5'b01000;//D parameter E=5'b10000;//E // 定义输入输出端口 input D_in; // 数据输入 input clk;//时钟 input rst_n;//复位 output wire D_out;//检测输出 reg [4:0] current_state,next_state;//设置当前状态和下个状态变量 assign D_out=(current_state==E)?1:0;//判断当前状态是否状态E，是则置输出为1，否则0 //状态转换 always @(posedge clk or negedge rst_n) begin if (!rst_n) current_state \u003c= IDLE; else current_state \u003c= next_state; end //根据当前状态和输入判断将要跳转的状态 always @(current_state or D_in) begin case (current_state)//通过状态转移图编写 IDLE: if(D_in==0) next_state\u003c=IDLE; else next_state\u003c=A;//1 A: if(D_in==0) next_state\u003c=B;//0 else next_state\u003c=A; B: if(D_in==0) next_state\u003c=C;//0 else next_state\u003c=A; C: if(D_in==0) next_state\u003c=IDLE; else next_state\u003c=D;//1 D: if(D_in==0) next_state\u003c=B; else next_state\u003c=E;//1；检测到10011 E: if(D_in==0) next_state\u003c=B; else next_state\u003c=A; default: next_state\u003c=IDLE;//缺省 endcase end endmodule testbench ztj_tb.v `timescale 10ns / 1ns module ztj_tb; // 参数定义 reg D_in; //序列输入 wireztj.v D_out; //状态检测输出 reg rst_n;//复位 reg clk;//时钟 integer k,d1;//循环变量与随机数值 ztj ztj( .D_in(D_in), .D_out(D_out), .rst_n(rst_n), .clk(clk) ); initial begin clk = 0; forever #5 clk = ~clk;//时钟配置T=10ns end initial begin//设置输入序列值 #20; rst_n=1'b0; #15; rst_n=1'b1;//复位键 #10; for(k=0;k\u003c=1000;k=k+1)//循环多次 begin d1={$random}%2;//每一个周期0 1变 D_in\u003c=d1; #10; end D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b1; #10; D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b1; #10; D_in=1'b1; #10; D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b1; #10; D_in=1'b0; #10; D_in=1'b0; #10; D_in=1'b1; #10; D_in=1'b1; #10; D_in=1'b0; #10; D_in=1'b0; #10; // 结束仿真。 end endmodule ","date":"2024-06-09","objectID":"/posts/%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E7%8A%B6%E6%80%81%E6%9C%BA/:1:0","tags":["verilog"],"title":"序列检测状态机","uri":"/posts/%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E7%8A%B6%E6%80%81%E6%9C%BA/"},{"categories":["学习记录"],"content":"写下通网笔记，顺便试着画下流程图 graph LR\rO(端到端的传输协议)--\u003eA(组帧技术)\rO--\u003eB(链路层的差错控制)\rO--\u003eC(标准数据链路控制协议)\rA--\u003eA1(面向字符组帧技术)\rA--\u003eA2(面向比特组帧技术)\rA--\u003eA3(采用长度计数组帧技术)\rB--\u003eB1(差错检测)\rB--\u003eB2(ARQ协议)\rB--\u003eB3(最佳帧长)\rB1--\u003e奇偶校验码\rB1--\u003eCRC校验\rB2--\u003e停等式ARQ\rB2--\u003e返回n-ARQ\rB2--\u003e选择重发式ARQ\rB2--\u003eARPANET_ARQ graph LR\rO(端到端的传输协议)--\u003eA(组帧技术)\rO--\u003eB(链路层的差错控制)\rO--\u003eC(标准数据链路控制协议)\rA--\u003eA1(面向字符组帧技术)\rA--\u003eA2(面向比特组帧技术)\rA--\u003eA3(采用长度计数组帧技术)\rB--\u003eB1(差错检测)\rB--\u003eB2(ARQ协议)\rB--\u003eB3(最佳帧长)\rB1--\u003e奇偶校验码\rB1--\u003eCRC校验\rB2--\u003e停等式ARQ\rB2--\u003e返回n-ARQ\rB2--\u003e选择重发式ARQ\rB2--\u003eARPANET_ARQ画这个好累……不画了`^ ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:0:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"第一章 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:1:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"1.1 数据传播网络中传输的基本内容是消息 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:1:1","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"1.2 通信网络的协议可按照分层的概念来设计。分层概念的基础是“模块”的概念。 完善的通信协议应当保证通信的终端能够高效地向用户提供所需的服务 OSI协议低三层：低层功能，网络功能协议，目的是保证系统之间跨越网络的可靠通信；高四层：高层功能，高层服务协议，是一些面向应用的信息处理和通信功能 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:1:2","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"第二章 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:2:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"2.2 链路层差错检测的目的是：如何有效地发现一帧数据比特经过物理信道传输后是否有错； 常用检测方法：奇偶校验和循环冗余 n-ARQ中，正向传输错误率过高，应该缩小n的大小，便于加快对错误的响应速度，及时重传；当反向应答错误率过高，应该加大n的大小，便于某次应答被后续的帧正确接受的应答弥补。 n-ARQ中，最佳窗口大小是**$1+2\\alpha$**(向上取整) ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:2:1","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"第三章 网络中的时延通常包括四个部分:处理时延、排队时延、传输时延和传播时延。 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:3:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"3.1 描述排队模型三个方面：一是顾客到达的行为和规则；二是排队规则，是等待制还是损失制；三是服务规则和服务时间（用户、排队、服务三个方面） ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:3:1","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"3.2 M/M/1 $N = \\sum_{n = 0}^{\\infty}np_{n} = \\sum_{n = 0}^{\\infty}n\\rho^{n}\\left( 1 - \\rho \\right) = \\frac{\\rho}{1 - \\rho} = \\frac{\\lambda}{\\mu - \\lambda}$ M/G/1 $W = \\frac{\\lambda \\overline{X^2}}{2 ( 1 - \\rho )}$ M/D/1 $W = \\frac{\\rho}{2\\mu( 1 - \\rho )}$ ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:3:2","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"第四章 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:4:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"4.1 多址协议分为固定分配多址协议、随机分配多址协议、基于预约方式的多址协议。 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:4:1","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"4.2 TDMA时延：$D=1 +\\frac{m}{2}+\\frac{mS}{2 ( 1 -S )}$ FDMA时延：$D=m\\Big[ 1 +\\frac{S}{2 ( 1 -S )}\\Big] =\\frac{m ( 2 -S )}{2 ( 1 -S )}$ 传统的固定多址接入协议不能有效地处理用户数量的可变性和通信业务的突发性。 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:4:2","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"4.3 对于随机多址接入协议，主要关心两个方面问题，一是稳态情况下系统的吞吐量和时延性能，另一个是系统的稳定性 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:4:3","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"4.4 冲突分解的基本思想是：如果系统发生碰撞，则让新到达的分组在系统外等待，在参与碰撞的分组均成功传输结束后，再让新分组传输 先到先服务(FCFS-First Come First Service)分裂算法的基本思想是根据分组到达的时间进行冲突分解,并力图保证先到达的分组最先传输成功。 该算法的主要功能是根据冲突分解的情况,动态地调整指配区间的长度和起始时刻。 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:4:4","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"第五章 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:5:0","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"5.1 路由算法执行两项主要功能：源节点/目的节点对之间的路径选择,以及选定路径之后将分组传送到它们的目的地 路由算法按决策分为集中式和分布式，按能否随网络的业务量和拓扑变化自适应地进行调整分为非自适应的和自适应的，按应用场合分为广域网路由和互联网路由 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:5:1","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["学习记录"],"content":"5.3 链路状态分组分发的最基本的方法是采用泛洪的方式，为防止每个节点处理和中转过时的链路状态分组，在这些分组中引入了序号，防止序号出错引入了寿命， 为了提高传输的可靠性，所有链路状态都要应答。 分布式路由选择算法的核心思想是各个节点独立的计算最短路径。典型的分布式最短路径选择算法有距离矢量路由算法和链路状态路由算法。 ","date":"2024-06-02","objectID":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/:5:2","tags":["网络"],"title":"通网笔记","uri":"/posts/%E9%80%9A%E7%BD%91%E7%AC%94%E8%AE%B0/"},{"categories":["杂谈"],"content":"​ 最近把《只狼》打通了，又想起了两年前打通的《古剑奇谭三》，于是把二者拿出来说一下。 ​ 这里且不谈《只狼》的难度，但确实是非常折磨的…… ​ 说说我对于只狼的风格的看法。首先游戏里的飞檐、楼阁、怪木、灯笼、屏风等等元素很丰富，还有练武的僧人，深山里的寺庙，以及飘零的樱花、飞扬的苇絮，整体营造的氛围是很烂漫的，整体的风格营造极具东方美学特色，有种武侠小说的感觉。这种风格的独立游戏 ，在我印象中，我玩过的游戏里是没有的。 ​ 我也在知乎上看到一个相关的帖子，是关于只狼里的一个boss狮子猿的，场景设计里的佛教元素。宗教特色我是很喜欢的（虽然我第一次打狮子猿也没发现，光顾着打架了）这也体现出，游戏的设计其实有相对于景物，更深层次的，涉及文化的东方特色了。 ​ 为什么谈及只狼，我还要谈古剑奇谭三呢？因为与只狼相似，古剑三也是极具民族文化特色的。 ​ 在我写这一篇的文章的时候，在我看来，古剑三还是综合来说中国最好的独立RPG游戏，虽然它是18年发行的。古剑三最惊艳的，莫过于它传递的理念。古剑三叙述的，是中华文化的“传承”。或许这样说，有点像官话，但是古剑三确实让我体会到了这种感觉。以剑为引，叙述千年来一路赓续的文化，这种独属于我们民族，其他历史没有这么悠久的文化中不可能有的价值。这种极其深层的理念指引着游戏的剧情，是古剑三最独特的地方，也是我最喜欢的地方。在这个方面，只狼是做不到的。 ​ 游戏结尾的画卷。正如古剑三的主题“千秋梦付星垂野”，它叙述的故事是宏大的。 ","date":"2024-03-17","objectID":"/posts/%E5%85%B3%E4%BA%8E%E5%8F%AA%E7%8B%BC%E5%92%8C%E5%8F%A4%E5%89%91%E5%A5%87%E8%B0%AD%E4%B8%89/:0:0","tags":["游戏"],"title":"关于只狼和古剑奇谭三","uri":"/posts/%E5%85%B3%E4%BA%8E%E5%8F%AA%E7%8B%BC%E5%92%8C%E5%8F%A4%E5%89%91%E5%A5%87%E8%B0%AD%E4%B8%89/"},{"categories":["杂谈"],"content":"最近突然想起高中，初中的事…可能是因为最近刚开学吧，又体会到了初高中开学时对假期不舍的感觉；另外现在刚好在玩《候鸟》，也有点代入高三的那种情境；以及我今年要考研了…要回到那种应试的学习环境中了。想到这些，惊起了回忆的涟漪吧。 想到了高中的生活，那么就不得不听听我高中时代听的歌了～高中的时候，用mp3或mp4听歌，是我的日常了。用一张sd卡，存了好多个g的歌。高一的时候蒙在被子里偷偷听；高三的时候就听得很凶了，每周上学前都要往mp4里新存一个歌单，几十首歌，可能是因为那是有种特别寂寞的感觉吧。每天中午午休，下午吃饭，晚自习前，晚上睡觉，都要听。 那时也会听收音机，现在还记得一个电台叫“hit-fm”，中午听的，一个声音特别暖主持人，有句开场白“北京88.7，上海87.9以及广州88.5”主要放的是一些欧美的歌；还有一个粤语的叫“声动传情”的节目和深圳的一个睡前讲故事的“晚安收音机”。此外还有一些台讲诸如《红楼梦》、《隋唐传》之类的故事的我也经常听。没东西可听，乱换台的时候，有时也会听到一些奇奇怪怪的广告。 对于一个身在封闭校园的学生来说，电台是校园与外界丰富的世界的桥梁，透过小小的mp3，在夜晚，想象着未来将走入的社会，经历的生活……这些电台陪我度过了很多个孤独的夜晚，当时还是很有感情的。 比较特殊的是高二啦，当时有新冠嘛，在家上网课，可以用手机听，自然是很好的，想听什么就听什么。那段时间每晚和同学打王者荣耀玩到深夜，早上上语文或者英语网课一挂又可以继续睡了，确实是没有在学校那么孤独的。那段时期最常听《k歌之王》和《杨花落尽子规啼》，印象很深刻，因为可能循环听了有两百多遍。 高中时听的大部分还是古风或者国风，那个时候的我，尚且很能体会那种美。我是一个很喜欢中华文化，诗词的人。每听一首歌，总喜欢看看歌词，然后在脑海里编织一个世界；想象一个故事、几个人物……然后细细欣赏它的美。其实也算是我自己溢出的感情的映射和寄托吧。想象着江南小城的小船烟雨；春日里的飞花；山林里的飞鸟和人迹；村野的烟火人家。 我的心境在高三其实发生了一些小变化，也算是到现在的一个过渡吧。 我开始思考过去现在与未来。我们的级长开级会的时候，总爱说什么“阿拉斯加的鳕鱼正在跃出水面”这样奇奇怪怪的话来鼓励我们，而我却也奇怪地能理解他想说什么。世界是广阔的，对于一个未经世事的高中生来说，仍有许多未知和远方等待着我们去探索。要走到向往的地方，就要刻苦学习。（虽然这很老套，好像也不存在必然联系，但是现在大学读了三年，比之当时，我反而觉得更对了） 也许是因为，高考结束后，就意味着与朝夕相处的同学离别，也要去往其他的城市学习和生活，用我当时常听的一首歌《每因稚趣消浓夏》里的一句词来说，就是“我也学着唱天涯和别离”。那个时候的下午，每每看到红漫天的夕阳，总是有以往从未有过的情感，仿佛也看到烟笼柳暗，长亭短亭，但也抱有些许的遐想与希冀。高中最后的那些下午也就在这样的凝望中过去了。 ​ 现在重听以前的那些歌，当然会想起那时的我，那时的心境，却又觉得陌生。好像那时候的我与现在的我是截然不同的两个人。那时的生活依旧有迹可循，却仿佛是另一个人的。听以前的歌，看以前写的文字，做的摘抄，仿佛是在与另一个人对话。 后面逐渐写吧，想写的挺多的，又有点乱，一片好像写不下了 ","date":"2024-02-28","objectID":"/posts/%E4%B8%AD%E5%AD%A6%E7%9A%84%E5%9B%9E%E5%BF%86/:0:0","tags":["回忆录"],"title":"中学的回忆","uri":"/posts/%E4%B8%AD%E5%AD%A6%E7%9A%84%E5%9B%9E%E5%BF%86/"},{"categories":["问题记录"],"content":"今天用 hugo 做博文，在 git push 时遇到了问题 以下的所有代码和报错信息都是在cmd中的 push之后有以下报错，没有成功 ssh: Could not resolve hostname github.com: Name or service not known fatal: Could not read from remote repository. 之前我也出现过这种报错，一般是代理占用了端口导致不成功，然而这次没有使用代理，也失败了，推测也是网络问题。 于是 ping github.com，果然 ping 不通 C:\\Users\\hugoblog\\public\u003eping github.com 正在 Ping github.com [20.205.243.166] 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 上百度搜了一下，成功解决~ 解决方法是修改 C:\\Windows\\System32\\drivers\\etc\\hosts文件，添加github的ip 每次修改前需要先获取当前 github 的 ip，通过访问https://sites.ipaddress.com/github.com/ 可以找到这样一句话 The website holds a global ranking of 47 and is associated with the network IP address 140.82.113.4 通过记事本打开C:\\Windows\\System32\\drivers\\etc\\hosts，在文件最下方添加一行140.82.113.4 github.com 注意上述这个 ip 地址是你从上面的网站查找到的，不是我这里贴出来这个，因为 github 的 IP 地址可能会变 保存之后，重新 ping github.com C:\\Users\\hugoblog\\public\u003eping github.com 正在 Ping github.com [140.82.113.4] 具有 32 字节的数据: 请求超时。 请求超时。 来自 140.82.113.4 的回复: 字节=32 时间=246ms TTL=50 来自 140.82.113.4 的回复: 字节=32 时间=248ms TTL=50 140.82.113.4 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 2，丢失 = 2 (50% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 246ms，最长 = 248ms，平均 = 247ms 成功了，git push 也可以正常运行。 ","date":"2024-01-22","objectID":"/posts/github-ping%E4%B8%8D%E9%80%9A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":["git","blog"],"title":"Github ping不通的解决方法","uri":"/posts/github-ping%E4%B8%8D%E9%80%9A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":["hello world"],"content":"首次部署到GitHub Page ","date":"2023-12-28","objectID":"/posts/hello-world/:0:0","tags":["hello world"],"title":"Hello World","uri":"/posts/hello-world/"}]